// Generated by CoffeeScript 2.4.1
(function() {
  var RuleTester, config, error, i, len, ref, rule, ruleTester, test, tests;

  ({
    rules: {
      'needs-flowmax': rule
    }
  } = require('..'));

  ({RuleTester} = require('eslint'));

  ruleTester = new RuleTester();

  error = function(name) {
    return {
      message: `${name}() only works with flowMax()`
    };
  };

  tests = {
    valid: [
      {
        code: 'a = 1'
      },
      {
        code: 'flow(\n  addProps({a: 1})\n)'
      },
      {
        code: 'flowMax(\n  addProps({a: 1})\n)'
      },
      {
        code: 'flowMax(\n  renderNothing()\n)'
      },
      {
        code: 'const addSomething = renderNothing()'
      },
      {
        code: 'const addSomething = branch(\n  (({x}) => x, renderNothing())\n)'
      },
      {
        code: 'const addSomething = addWrapper(\n  ({render}) => <>{render()}</>\n)'
      },
      {
        code: 'const addSomething = addWrapperHOC(\n  ({render}) => <>{render()}</>\n)'
      },
      {
        code: 'const addSomething = () => {\n  addPropTypes({x: PropTypes.string})\n}'
      },
      {
        code: 'flow(\n  branchPure(({x}) => x, a)\n)'
      }
    ],
    invalid: [
      {
        code: 'flow(\n  renderNothing()\n)',
        errors: [error('renderNothing')]
      },
      {
        code: 'flow(\n  returns(() => 1)\n)',
        // don't fix unless should-fix-flow-flowmax is set
        output: 'flow(\n  returns(() => 1)\n)',
        errors: [error('returns')]
      },
      {
        code: 'flow(\n  branch(({x}) => x > 1, renderNothing()),\n)',
        errors: [error('branch')]
      },
      {
        code: 'flow(\n  branch(({x}) => x > 1, returns(() => 3)),\n)',
        errors: [error('branch')]
      },
      {
        code: 'flow(\n  branch(({x}) => x > 1, returns(() => 3)),\n)',
        errors: [error('branch')]
      },
      {
        // branch() is always magic
        code: 'flow(\n  branch(({x}) => x > 1, addProps({x: 3})),\n)',
        errors: [error('branch')]
      },
      {
        code: 'flow(\n  addProps({x: 1}),\n  addPropTypes({x: PropTypes.number.isRequired}),\n  ({x}) => <div>{x}</div>\n)',
        errors: [error('addPropTypes')]
      },
      {
        code: 'flowMax(\n  flow(\n    branch(({x}) => x > 1, renderNothing()),\n  )\n)',
        errors: [error('branch')]
      },
      {
        // catch returns() inside branchPure()
        code: 'flow(\n  branchPure(({x}) => x, returns(() => 1))\n)',
        errors: [error('returns')]
      },
      {
        // addWrapper()
        code: 'flow(\n  addWrapper(({render}) => <div>{render()}</div>)\n)',
        errors: [error('addWrapper')]
      },
      {
        // addWrapperHOC()
        code: 'flow(\n  addWrapperHOC(withNavigation)\n)',
        errors: [error('addWrapperHOC')]
      },
      {
        // nested flowMax()
        code: 'flow(\n  flowMax(something())\n)',
        errors: [error('flowMax')]
      },
      {
        code: 'flow(\n  returns(() => 1)\n)',
        output: 'flowMax(\n  returns(() => 1)\n)',
        errors: [error('returns')],
        settings: {
          'ad-hok/should-fix-flow-flowmax': true
        }
      }
    ]
  };

  config = {
    parser: 'babel-eslint',
    parserOptions: {
      ecmaVersion: 2018,
      ecmaFeatures: {
        jsx: true
      }
    }
  };

  ref = [...tests.valid, ...tests.invalid];
  for (i = 0, len = ref.length; i < len; i++) {
    test = ref[i];
    Object.assign(test, config);
  }

  ruleTester.run('needs-flowmax', rule, tests);

}).call(this);
