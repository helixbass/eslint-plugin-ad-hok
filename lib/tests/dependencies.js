// Generated by CoffeeScript 2.4.1
(function() {
  var RuleTester, config, errorMissing, errorUnnecessary, i, len, ref, rule, ruleTester, test, tests;

  ({
    rules: {
      dependencies: rule
    }
  } = require('..'));

  ({RuleTester} = require('eslint'));

  ruleTester = new RuleTester();

  errorMissing = function(name) {
    return {
      message: `Missing dependency "${name}"`
    };
  };

  errorUnnecessary = function(name) {
    return {
      message: `Unnecessary dependency "${name}"`
    };
  };

  tests = {
    valid: [
      {
        // no dependencies argument
        code: 'flow(\n  addProps(({a, b}) => ({\n    c\n  })),\n  addEffect(({a}) => () => {\n    c()\n  }),\n  addHandlers({\n    a: ({b}) => () => {\n      c()\n    }\n  }),\n  addStateHandlers(\n    {a: 1},\n    {b: (_, {c}) => () => ({a: 2})}\n  )\n)'
      },
      {
        // correct dependencies argument
        code: 'flow(\n  addProps(({a, b}) => ({\n    c\n  }), [\'a\', \'b\']),\n  addEffect(({a}) => () => {\n    c()\n  }, [\'a\']),\n  addHandlers({\n    a: ({b}) => () => {\n      c()\n    }\n  }, [\'b\']),\n  addStateHandlers(\n    {a: 1},\n    {b: (_, {c}) => () => ({a: 2})},\n    [\'c\']\n  )\n)'
      },
      {
        // spread props
        code: 'flow(\n  addProps(({a, b, ...c}) => ({\n    c\n  }), [\'a\']),\n  addEffect(({a, b, ...c}) => () => {\n    c()\n  }, [\'a\']),\n  addHandlers({\n    a: ({b, c, ...d}) => () => {\n      c()\n    }\n  }, [\'b\']),\n  addStateHandlers(\n    {a: 1},\n    {b: (_, {c, d, ...e}) => () => ({a: 2})},\n    [\'c\']\n  )\n)'
      },
      {
        // path dependencies
        code: 'flow(\n  addProps(({a, b}) => ({\n    c\n  }), [\'a.b\', \'b\']),\n  addEffect(({a}) => () => {\n    c()\n  }, [\'a.b\']),\n  addHandlers({\n    a: ({b}) => () => {\n      c()\n    }\n  }, [\'b.c\']),\n  addStateHandlers(\n    {a: 1},\n    {b: (_, {c}) => () => ({a: 2})},\n    [\'c.d\']\n  )\n)'
      },
      {
        // callback-style dependencies
        code: 'flow(\n  addProps(({a, b}) => ({\n    c\n  }), (prevProps, props) => true),\n  addEffect(({a}) => () => {\n    c()\n  }, (prevProps, props) => true),\n  addHandlers({\n    a: ({b}) => () => {\n      c()\n    }\n  }, (prevProps, props) => true),\n  addStateHandlers(\n    {a: 1},\n    {b: (_, {c}) => () => ({a: 2})},\n    (prevProps, props) => true\n  )\n)'
      }
    ],
    invalid: [
      {
        // missing dependencies
        code: 'addProps(({a}) => ({\n  b: a\n}), [])',
        errors: [errorMissing('a')]
      },
      {
        code: 'addEffect(({a}) => () => {\n  a()\n}, [])',
        errors: [errorMissing('a')]
      },
      {
        code: 'addStateHandlers(\n  {a: 1},\n  {b: (_, {c, d}) => () => ({a: c + d})},\n  [\'d.e\']\n)',
        errors: [errorMissing('c')]
      },
      {
        code: 'addHandlers(\n  {\n    a: ({b, c}) => () => {\n      b()\n    }\n  },\n  [\'b\']\n)',
        errors: [errorMissing('c')]
      },
      {
        // unnecessary dependencies
        code: 'addProps(() => ({\n  b: 1\n}), [\'b\'])',
        errors: [errorUnnecessary('b')]
      },
      {
        code: 'addEffect(({a}) => () => {\n  a()\n}, [\'a\', \'b\'])',
        errors: [errorUnnecessary('b')]
      },
      {
        code: 'addStateHandlers(\n  {a: 1},\n  {b: (_, {c, d}) => () => ({a: c + d})},\n  [\'e.f\', \'d\', \'c\']\n)',
        errors: [errorUnnecessary('e.f')]
      },
      {
        code: 'addHandlers(\n  {\n    a: ({b, c}) => () => {\n      b()\n    }\n  },\n  [\'b\', \'c\', \'d\']\n)',
        errors: [errorUnnecessary('d')]
      },
      {
        // unnecessary and missing dependencies
        code: 'addProps(({c}) => ({\n  b: 1\n}), [\'b\'])',
        errors: [errorMissing('c'),
      errorUnnecessary('b')]
      },
      {
        // aggregates handlers
        code: 'addHandlers(\n  {\n    a: ({b}) => () => {\n      b()\n    },\n    c: ({d}) => () => {\n      d()\n    }\n  },\n  []\n)',
        errors: [errorMissing('b'),
      errorMissing('d')]
      },
      {
        code: 'addStateHandlers(\n  {a: 1},\n  {\n    b: (_, {c, d}) => () => ({a: 2}),\n    e: (_, {f}) => () => ({a: 3}),\n  },\n  [\'d\']\n)',
        errors: [errorMissing('c'),
      errorMissing('f')]
      }
    ]
  };

  config = {
    parser: 'babel-eslint',
    parserOptions: {
      ecmaVersion: 2018,
      ecmaFeatures: {
        jsx: true
      }
    }
  };

  ref = [...tests.valid, ...tests.invalid];
  for (i = 0, len = ref.length; i < len; i++) {
    test = ref[i];
    Object.assign(test, config);
  }

  ruleTester.run('dependencies', rule, tests);

}).call(this);
