// Generated by CoffeeScript 2.4.1
(function() {
  var RuleTester, config, error, i, len, ref, rule, ruleTester, test, tests;

  ({
    rules: {
      'no-unnecessary-flowmax': rule
    }
  } = require('..'));

  ({RuleTester} = require('eslint'));

  ruleTester = new RuleTester();

  error = function() {
    return {
      message: "Unnecessary use of flowMax()"
    };
  };

  tests = {
    valid: [
      {
        code: 'a = 1'
      },
      {
        code: 'flow(\n  addProps({a: 1})\n)'
      },
      {
        code: 'flowMax(\n  renderNothing()\n)'
      },
      {
        code: 'flowMax(\n  returns(() => 1)\n)'
      },
      {
        code: 'flowMax(\n  branch(({x}) => x > 1, renderNothing()),\n)'
      },
      {
        code: 'flowMax(\n  branchPure(({x}) => x > 1, renderNothing()),\n)'
      },
      {
        code: 'flowMax(\n  branch(({x}) => x > 1, returns(() => 3)),\n)'
      },
      {
        code: 'flowMax(\n  branchPure(({x}) => x > 1, returns(() => 3)),\n)'
      },
      {
        code: 'flowMax(\n  addProps({x: 1}),\n  addPropTypes({x: PropTypes.number.isRequired}),\n  ({x}) => <div>{x}</div>\n)'
      },
      {
        code: 'import {renderNothing} from \'ad-hok\''
      },
      {
        // branch() is always magic
        code: 'flowMax(\n  branch(({x}) => x > 1, addProps({x: 3})),\n  ({x}) => <div>{x}</div>\n)'
      },
      {
        // nested flowMax() is magic
        code: 'flowMax(\n  flowMax(addSomeStuff()),\n  ({x}) => <div>{x}</div>\n)'
      },
      {
        // unknown call could be magic
        code: 'flowMax(\n  addSomeStuff(),\n  ({x}) => <div>{x}</div>\n)'
      },
      {
        // unknown identifier could be magic
        code: 'flowMax(\n  addSomeStuff,\n  ({x}) => <div>{x}</div>\n)'
      }
    ],
    invalid: [
      {
        code: 'flowMax(\n  addProps({x: 1}),\n  ({x}) => <div>{x}</div>\n)',
        errors: [error()]
      },
      {
        code: 'flowMax(\n  branchPure(({x}) => x > 1, addProps({x: 3})),\n  ({x}) => <div>{x}</div>\n)',
        errors: [error()]
      },
      {
        code: 'flowMax(\n  addProps({x: 1}),\n  ({x}) => <div>{x}</div>\n)',
        output: 'flow(\n  addProps({x: 1}),\n  ({x}) => <div>{x}</div>\n)',
        errors: [error()],
        settings: {
          'ad-hok/should-fix-flow-flowmax': true
        }
      }
    ]
  };

  config = {
    parser: 'babel-eslint',
    parserOptions: {
      ecmaVersion: 2018,
      ecmaFeatures: {
        jsx: true
      }
    }
  };

  ref = [...tests.valid, ...tests.invalid];
  for (i = 0, len = ref.length; i < len; i++) {
    test = ref[i];
    Object.assign(test, config);
  }

  ruleTester.run('no-unnecessary-flowmax', rule, tests);

}).call(this);
