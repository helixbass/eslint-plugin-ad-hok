// Generated by CoffeeScript 2.4.1
(function() {
  var RuleTester, config, error, i, len, ref, rule, ruleTester, test, tests;

  ({
    rules: {
      'no-flowmax-in-forwardref': rule
    }
  } = require('..'));

  ({RuleTester} = require('eslint'));

  ruleTester = new RuleTester();

  error = {
    message: "Avoid using flowMax() within React.forwardRef()"
  };

  tests = {
    valid: [
      {
        code: 'flowMax()'
      },
      {
        code: 'const HoistedComponent = flowMax(\n  addWrapper(({render, forwardedRef}) => <div ref={forwardedRef}>{render()}</div>),\n  ({foo}) => <span>{foo}</span>\n)\n\nconst Component = React.forwardRef((props, ref) =>\n  <HoistedComponent {...props} forwardedRef={ref} />\n)'
      },
      {
        code: 'const Foo = forwardRef((props, ref) =>\n  flow(\n    addProps(({foo}) => ({bar: foo + 1})),\n    ({bar, ref}) => <div ref={ref}>{bar}</div>\n  )({...props, ref})\n)'
      }
    ],
    invalid: [
      {
        code: 'export default forwardRef((props, ref) =>\n  callWith({...props, ref})(\n    flowMax(\n      addProps({foo: \'bar\'}),\n      ({foo, ref}) =>\n        <div ref={ref}>{foo}</div>\n    )\n  )\n)',
        errors: [error]
      },
      {
        code: 'const Foo = React.forwardRef((props, forwardedRef) => {\n  const InnerFoo = flowMax(\n    ({bar, forwardedRef}) =>\n      <div ref={forwardedRef}>{bar}</div>\n  )\n  return <InnerFoo {...props} forwardedRef={forwardedRef} />\n})',
        errors: [error]
      }
    ]
  };

  config = {
    parser: 'babel-eslint',
    parserOptions: {
      ecmaVersion: 2018,
      ecmaFeatures: {
        jsx: true
      }
    }
  };

  ref = [...tests.valid, ...tests.invalid];
  for (i = 0, len = ref.length; i < len; i++) {
    test = ref[i];
    Object.assign(test, config);
  }

  ruleTester.run('no-flowmax-in-forwardref', rule, tests);

}).call(this);
