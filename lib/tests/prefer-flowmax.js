// Generated by CoffeeScript 2.4.1
(function() {
  var RuleTester, config, error, i, len, ref, rule, ruleTester, test, tests;

  ({
    rules: {
      'prefer-flowmax': rule
    }
  } = require('..'));

  ({RuleTester} = require('eslint'));

  ruleTester = new RuleTester();

  error = function() {
    return {
      message: "Use flowMax() instead"
    };
  };

  tests = {
    valid: [
      {
        code: 'a = 1'
      },
      {
        code: 'flow(\n  addProps({a: 1})\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // don't duplicate needs-flowmax
        code: 'flow(\n  addPropTypes({a: 1})\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        code: 'flow(\n  branchPure(({x}) => x, returns(() => 2))\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // functions are ok
        code: 'flow(\n  ({x}) => x\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // whitelist call
        code: 'flow(\n  addSomethingNonmagic()\n)',
        options: ['whenUsingUnknownHelpers'],
        settings: {
          'ad-hok/nonmagic-helper-whitelist': ['addSomethingNonmagic']
        }
      },
      {
        // whitelist call
        code: 'flow(\n  addSomethingNonmagic\n)',
        options: ['whenUsingUnknownHelpers'],
        settings: {
          'ad-hok/nonmagic-helper-whitelist': ['addSomethingNonmagic']
        }
      },
      {
        // possibly-magic-helper-regex defaults to add.*
        code: 'flow(\n  something\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // member expression isn't considered potentially magic
        code: 'flow(\n  something.else\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // immediately-invoked functions are ok
        code: 'flow(\n  (({x}) => doSomethingMagic(x))()\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // ternary is ok unless one of its branches is a helper
        code: 'flow(\n  y ? doSomething : x => x\n)',
        options: ['whenUsingUnknownHelpers']
      },
      {
        // recognizes addPropsOnChange()
        code: 'flow(\n  addPropsOnChange([\'x\'], ({x}) => ({a: x +1}))\n)',
        options: ['whenUsingUnknownHelpers']
      }
    ],
    invalid: [
      {
        // always
        code: 'flow(\n  addProps({a: 1})\n)',
        // don't fix unless should-fix-flow-flowmax
        output: 'flow(\n  addProps({a: 1})\n)',
        errors: [error()],
        options: ['always']
      },
      {
        // default is always
        code: 'flow(\n  addProps({a: 1})\n)',
        errors: [error()]
      },
      {
        // whenUsingUnknownHelpers
        code: 'flow(\n  addSomething()\n)',
        errors: [error()],
        options: ['whenUsingUnknownHelpers']
      },
      {
        code: 'flow(\n  addSomething\n)',
        errors: [error()],
        options: ['whenUsingUnknownHelpers']
      },
      {
        // possibly-magic-helper-regex
        code: 'flow(\n  something\n)',
        errors: [error()],
        options: ['whenUsingUnknownHelpers'],
        settings: {
          'ad-hok/possibly-magic-helper-regex': 'add.*|some.*'
        }
      },
      {
        // nested flow()
        code: 'flow(\n  flow(\n    addSomething\n  )()\n)',
        errors: [error()],
        options: ['whenUsingUnknownHelpers']
      },
      {
        // should-fix-flow-flowmax
        code: 'flow(\n  addProps({a: 1})\n)',
        output: 'flowMax(\n  addProps({a: 1})\n)',
        errors: [error()],
        options: ['always'],
        settings: {
          'ad-hok/should-fix-flow-flowmax': true
        }
      },
      {
        // ternary isn't ok if one of its branches is a helper
        code: 'flow(\n  y ? addSomething : x => x\n)',
        errors: [error()],
        options: ['whenUsingUnknownHelpers']
      },
      {
        // ternary isn't ok if one of its branches is a helper
        code: 'flow(\n  y ? x => x : addSomething\n)',
        errors: [error()],
        options: ['whenUsingUnknownHelpers']
      }
    ]
  };

  config = {
    parser: 'babel-eslint',
    parserOptions: {
      ecmaVersion: 2018,
      ecmaFeatures: {
        jsx: true
      }
    }
  };

  ref = [...tests.valid, ...tests.invalid];
  for (i = 0, len = ref.length; i < len; i++) {
    test = ref[i];
    Object.assign(test, config);
  }

  ruleTester.run('prefer-flowmax', rule, tests);

}).call(this);
