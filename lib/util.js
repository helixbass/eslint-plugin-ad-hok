// Generated by CoffeeScript 2.4.1
(function() {
  var getAddDisplayNameFixer, getFlowMaxToFlowFixer, getFlowToFlowMaxFixer, isBranchPure, isFlow, isFlowMax, isFunction, isMagic, isNonmagicHelper, magicHelperNames, nonmagicHelperNames, shouldFix,
    indexOf = [].indexOf;

  isFlowMax = function(node) {
    var ref;
    return (node != null ? (ref = node.callee) != null ? ref.type : void 0 : void 0) === 'Identifier' && node.callee.name === 'flowMax';
  };

  isFlow = function(node) {
    var ref;
    return (node != null ? (ref = node.callee) != null ? ref.type : void 0 : void 0) === 'Identifier' && node.callee.name === 'flow';
  };

  magicHelperNames = ['returns', 'renderNothing', 'addPropTypes', 'addWrapper', 'addWrapperHOC', 'branch'];

  isMagic = function(node) {
    var ref, ref1;
    if (isFlowMax(node)) {
      return true;
    }
    if ((node != null ? (ref = node.callee) != null ? ref.type : void 0 : void 0) !== 'Identifier') {
      return;
    }
    return ref1 = node.callee.name, indexOf.call(magicHelperNames, ref1) >= 0;
  };

  nonmagicHelperNames = ['addState', 'addEffect', 'addProps', 'addHandlers', 'addStateHandlers', 'addRef', 'addCallback', 'addContext', 'branchPure', 'addPropsOnChange'];

  isNonmagicHelper = function(node) {
    var ref, ref1;
    if ((node != null ? (ref = node.callee) != null ? ref.type : void 0 : void 0) !== 'Identifier') {
      return false;
    }
    return ref1 = node.callee.name, indexOf.call(nonmagicHelperNames, ref1) >= 0;
  };

  isFunction = function(node) {
    var ref;
    return (ref = node != null ? node.type : void 0) === 'FunctionExpression' || ref === 'ArrowFunctionExpression';
  };

  isBranchPure = function(node) {
    var ref;
    if ((node != null ? (ref = node.callee) != null ? ref.type : void 0 : void 0) !== 'Identifier') {
      return;
    }
    return node.callee.name === 'branchPure';
  };

  getFlowToFlowMaxFixer = function({node, context}) {
    return function(fixer) {
      return fixer.replaceText(node.callee, 'flowMax');
    };
  };

  getFlowMaxToFlowFixer = function({node, context}) {
    return function(fixer) {
      return fixer.replaceText(node.callee, 'flow');
    };
  };

  getAddDisplayNameFixer = function({node, context}) {
    return function(fixer) {
      var componentName;
      componentName = node.parent.id.name;
      return fixer.insertTextBefore(node.arguments[0], `addDisplayName('${componentName}'), `);
    };
  };

  shouldFix = function({
      context: {settings}
    }) {
    return !!settings['ad-hok/should-fix-flow-flowmax'];
  };

  module.exports = {isFlowMax, isFlow, magicHelperNames, nonmagicHelperNames, isFunction, isMagic, isNonmagicHelper, isBranchPure, getFlowToFlowMaxFixer, getFlowMaxToFlowFixer, shouldFix, getAddDisplayNameFixer};

}).call(this);
