// Generated by CoffeeScript 2.4.1
(function() {
  var getFlowToFlowMaxFixer, isBranchPure, isFlow, isMagic, shouldFix;

  ({isFlow, isMagic, isBranchPure, getFlowToFlowMaxFixer, shouldFix} = require('../util'));

  module.exports = {
    meta: {
      docs: {
        description: 'Flag calls that are missing containing flowMax()',
        category: 'Possible Errors',
        recommended: true
      },
      schema: [],
      fixable: 'code'
    },
    create: function(context) {
      var report;
      report = function(node, magicName) {
        return context.report({
          node,
          message: `${magicName}() only works with flowMax()`,
          fix: shouldFix({context}) ? getFlowToFlowMaxFixer({node, context}) : null
        });
      };
      return {
        CallExpression: function(node) {
          var argument, branchPureArgument, i, len, ref, results;
          if (!isFlow(node)) {
            return;
          }
          ref = node.arguments;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            argument = ref[i];
            if (isMagic(argument)) {
              report(node, argument.callee.name);
            }
            if (isBranchPure(argument)) {
              results.push((function() {
                var j, len1, ref1, results1;
                ref1 = argument.arguments;
                results1 = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  branchPureArgument = ref1[j];
                  if (isMagic(branchPureArgument)) {
                    results1.push(report(node, branchPureArgument.callee.name));
                  } else {
                    results1.push(void 0);
                  }
                }
                return results1;
              })());
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
    }
  };

}).call(this);
