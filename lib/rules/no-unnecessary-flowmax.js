// Generated by CoffeeScript 2.4.1
(function() {
  var getFlowMaxToFlowFixer, isBranchPure, isFlowMax, isFunction, isNonmagic, nonmagicHelperNames, shouldFix,
    indexOf = [].indexOf;

  ({isFlowMax, nonmagicHelperNames, isFunction, isBranchPure, shouldFix, getFlowMaxToFlowFixer} = require('../util'));

  isNonmagic = function(node) {
    var callee, ref;
    if (node == null) {
      return true;
    }
    if (isFunction(node)) {
      return true;
    }
    ({callee} = node);
    if ((callee != null ? callee.type : void 0) !== 'Identifier') {
      return false;
    }
    return ref = callee.name, indexOf.call(nonmagicHelperNames, ref) >= 0;
  };

  module.exports = {
    meta: {
      docs: {
        description: 'Flag unnecessary uses of flowMax()',
        category: 'General',
        recommended: true
      },
      schema: [],
      fixable: 'code'
    },
    create: function(context) {
      return {
        CallExpression: function(node) {
          var argument, branchPureArgument, i, j, len, len1, ref, ref1;
          if (!isFlowMax(node)) {
            return;
          }
          ref = node.arguments;
          for (i = 0, len = ref.length; i < len; i++) {
            argument = ref[i];
            if (!isNonmagic(argument)) {
              return;
            }
            if (isBranchPure(argument)) {
              ref1 = argument.arguments;
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                branchPureArgument = ref1[j];
                if (!isNonmagic(branchPureArgument)) {
                  return;
                }
              }
            }
          }
          return context.report({
            node,
            message: 'Unnecessary use of flowMax()',
            fix: shouldFix({context}) ? getFlowMaxToFlowFixer({node, context}) : null
          });
        }
      };
    }
  };

}).call(this);
